@model Reader.Web.Models.ItemsViewModel
@{
    ViewBag.Title = "View";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section scripts
{
    <script type="text/javascript">
        // Add all the item ids to a JavaScript array so we can hotkey page through them
        var itemIdArray = [];
        var activeItemId = 0;

        @foreach (var i in Model.Items.Where(x => x.IsRead == false).ToList())
        {
            <text>itemIdArray.push(</text>@i.ItemID<text>);</text>
        }

        $(document).ready(function () {
            $('.item').click(function (e) {
                $('#content').scrollTo(this);
                setActiveItem($(this));
            });

            $('.star').click(function (e) {
                var imagePath = $(this).attr('src');

                if (imagePath.indexOf('star.png') >= 0) {
                    $(this).attr('src', '@Url.Content("~/Images/star_lit.png")');
                    $.post('api/items/setStar', "=" + $(this).attr("alt"));
                } else {
                    $(this).attr('src', '@Url.Content("~/Images/star.png")');
                    $.post('api/items/removeStar', "=" + $(this).attr("alt"));
                }

                event.stopPropagation();
            });

            $(document).keypress(function (event) {
                if (itemIdArray.length == 0) {
                    return;
                }

                if (event.which == 106 || event.which == 107) {
                    currentIndex = jQuery.inArray(activeItemId, itemIdArray);

                    if (currentIndex == -1) {
                        activeItemId = itemIdArray[0];
                    } else {
                        if (event.which == 106) {
                            currentIndex = currentIndex + 1;
                        } else if (event.which == 107) {
                            currentIndex = currentIndex - 1;
                        }

                        // Check bounds
                        if (currentIndex >= itemIdArray.length) {
                            activeItemId = itemIdArray[itemIdArray.length - 1];
                        } else if (currentIndex <= 0) {
                            activeItemId = itemIdArray[0];
                        } else {
                            activeItemId = itemIdArray[currentIndex];
                        }
                    }

                    var item = $("div.item-id-" + activeItemId);
                    $('#content').scrollTo(item);
                    setActiveItem($(item));
                }
            });

            $("#toggle-add").click(function () {
                $('#add-feed').toggle('fast');
            });

            $(".alert").delay(5000).fadeOut('slow');
        });

        function setActiveItem(item) {
            activeItemId = parseInt(item.children("input[name='item-id']").val(), 10);

            // Side the active item border styling
            $('.item').removeClass('selected-item');
            item.addClass('selected-item');

            // Post to the 'set read' web service
            if (item.children("input[name='is-read']").val() != "read") {
                $.post(
                    'api/items/read',
                    "=" + item.children("input[name='item-id']").val(),
                    function (data) {
                        // Set the item's hidden input read indicator
                        item.children("input[name='is-read']").val("read");

                        // Decrement the unread counter
                        unreadCountElement = $('li.selected-feed').find('.unread-count');

                        if (unreadCountElement) {
                            unreadCount = parseInt(unreadCountElement.text().replace("(", "").replace(")", ""), 10) - 1;
                            unreadCountElement.text("(" + unreadCount + ")");

                            if (unreadCount == 0 || isNaN(unreadCount)) {
                                unreadCountElement.html("&nbsp;");
                            }
                        }

                        // Hide the new item icon
                        $('.read-icon-' + activeItemId).fadeOut('fast');
                    });
            }
        }
    </script>
}
<div id="nav">
    <a href="#" class="button" id="toggle-add">Add feed</a>
    <div id="add-feed" style="display: none;">
        <span class="mini">Paste the feed URL and click add:</span>
        @using (Html.BeginForm("AddFeed", "Default"))
        {
            <input type="text" name="url" />
            <input type="submit" value="Add" />
        }
    </div>
    <div id="feeds">
        <ul>
            @foreach (var feed in Model.Feeds)
            {
                <li class="@(feed.Feed.URL == Model.SelectedFeed.Feed.URL ? "selected-feed" : "")">
                    <a href="@Url.Action("View", new { feed = feed.Feed.URL })">
                        <div class="favicon">
                            <img height="16" width="16" src="@Url.Content("~/Images/rss_ico.png")" />
                        </div>
                        <div class="name">@Server.UrlDecode(feed.Feed.DisplayName)</div>
                        <div class="unread-count">@(feed.UnreadCount == 0 ? "" : "(" + feed.UnreadCount.ToString() + ")")&nbsp;</div>
                    </a>
                    <div style="clear: both;"></div>
                </li>
            }
            <li style="border-bottom: 1px solid #ebebeb; margin-top: 10px; margin-bottom: 10px;"></li>
            <li class="@(Model.SelectedFeed.Feed.URL == "starred" ? "selected-feed" : "")">
                <a href="@Url.Action("View", new { feed = "starred" })">
                    <div class="favicon">
                        <img height="16" width="16" src="@Url.Content("~/Images/darkstar.png")" />
                    </div>
                    <div class="name">Starred Items</div>
                    <div class="unread-count">&nbsp;</div>
                </a>
                <div style="clear: both;"></div>

            </li>
        </ul>
    </div>
</div>
@if (Model.SelectedFeed.Feed.URL != string.Empty)
{
    <div id="feed-controls">
        <div class="feed-name">@Model.SelectedFeed.Feed.DisplayName</div>

        @if (Model.SelectedFeed.UnreadCount > 0)
        {
            <div>
                @using (Html.BeginForm("Refresh", "Default"))
                {
                    <input type="hidden" name="feedid" value="@Model.SelectedFeed.Feed.FeedID" />
                    <input type="submit" class="button gray" value="Refresh" name="refresh-button" />
                }
            </div>
            <div>
                @using (Html.BeginForm("MarkAllRead", "Default"))
                {
                    <input type="hidden" name="feedid" value="@Model.SelectedFeed.Feed.FeedID" />
                    <input type="submit" class="button gray" value="Mark All Read" name="markread-button" />
                }
            </div>
            <div>
                @using (Html.BeginForm("Unsubscribe", "Default"))
                {
                    <input type="hidden" name="feedid" value="@Model.SelectedFeed.Feed.FeedID" />
                    <input type="submit" class="button gray" value="Unsubscribe" name="unsubscribe-button" onclick="return confirm('Are you sure you want to unsubscribe from this feed?')" />
                }
            </div>
        }
        <div style="clear: both;"></div>
    </div>
}

<div id="content">
    @if (TempData["Error"] != null)
    {
        <div class="alert error">
            @TempData["Error"]
        </div>
    }
    @if (TempData["Message"] != null)
    {
        <div class="alert message">
            @TempData["Message"]
        </div>
    }
    @foreach (var item in Model.Items)
    {
        <div class="item item-id-@item.ItemID.ToString()">
            <input type="hidden" name="item-id" value="@item.ItemID" />
            <input type="hidden" name="is-read" value="@(item.IsRead ? "read" : "")" />
            <input type="hidden" name="is-starred" value="@(item.IsStarred ? "starred" : "")" />

            <h3><a href="@(Server.UrlDecode(item.URL))">@item.Title</a></h3>
            <div class="item-icons">
                @if (item.IsStarred)
                {
                    <img src="@Url.Content("~/Images/star_lit.png")" alt="@item.ItemID" class="star" />
                }
                else
                {
                    <img src="@Url.Content("~/Images/star.png")" alt="@item.ItemID" class="star" />
                }

                @if (!item.IsRead)
                {
                    <img src="@Url.Content("~/Images/mail.png")" alt="read-icon" class="read-icon-@item.ItemID" />
                }
            </div>
            <div style="clear: both;"></div>
            <p class="date">@(item.PublishDate.HasValue ? item.PublishDate.Value.ToString() : string.Empty)</p>
            @Html.Raw(item.Content)
        </div>
    }

    @if (Model.SelectedFeed.Feed.URL == string.Empty)
    {
        <div class="no-items">
            Select a feed on the left and start reading!
        </div>
    }
    else
    {
        if (Model.Items.Count == 0)
        {
        <div class="no-items">
            No more to read here...
            <br />
            <br />
            <img src="@Url.Content("~/Images/i-should-buy-a-boat-cat.jpg")" alt="boatcat"/>
        </div>
        }
    }
</div>
<div class="clear">
</div>
